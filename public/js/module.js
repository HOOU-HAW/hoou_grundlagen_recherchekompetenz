!function(e){function n(r){if(i[r])return i[r].exports;var a=i[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}var i={};return n.m=e,n.c=i,n.p="",n(0)}([function(e,n,i){i(1),e.exports=i(32)},function(e,n,i){"use strict";function r(){return parseInt("100%",10)/100*document.querySelector(".reveal").offsetWidth-380}function a(e){$(e).removeClass("scrollable-slide")}function t(e){$(e).addClass("scrollable-slide")}Reveal.initialize({controls:!1,progress:!0,history:!1,center:!1,width:r(),height:"100%",margin:0,minScale:.2,maxScale:2,slideNumber:"c/t",overview:!1,transitionSpeed:"fast",correctWidth:-380,transition:"none",keyboard:{37:"prev",38:"prev",39:"next",40:"next"},menu:{side:"left",numbers:!1,titleSelector:"h1, h2, h3, h4, h5, h6",hideMissingTitles:!1,markers:!0,showAlways:!0,catchMainAreaClick:!1,custom:[{title:"DE",icon:'<img class="nav-flag" src="img/de.png">',link:"de.html"}],themes:!1,transitions:!1,openButton:!1,openSlideNumber:!1,keyboard:!1,navigation:!0},dependencies:[{src:"dependencies/reveal.js-menu/menu.js"}]}),window.addEventListener("resize",function(){Reveal.configure({width:r()})}),Reveal.addEventListener("ready",function(e){t(e.currentSlide)}),Reveal.addEventListener("slidechanged",function(e){a(e.previousSlide),t(e.currentSlide)}),i(2)("body > div.reveal section form.exercise"),i(28)("section div.feedbackArea"),i(31)("section > .navigation")},function(e,n,i){"use strict";function r(e,n){function i(e){e.preventDefault(),D.each(o),d()}function r(e){e.preventDefault();var n=D.find("input");D.filter(".correctChecked, .wrongChecked").removeClass("correctChecked wrongChecked"),n.prop("disabled",!1),n.prop("checked",!1),x.show(),E.hide(),S=0}function t(e){var n=jQuery(this),i=n.find("input:enabled").first(),r=i.prop("checked");i.prop("checked",!r)}function o(e,n){n=jQuery(n);var i=c(n,u(S)),r=!!i.prop("checked"),a=i.prop("disabled")||i.data("correctState")===!0||i.data("correctState")===S;h(n,r===a),n.removeClass("correctChecked wrongChecked"),r&&(r===a?(i.attr("disabled",!0),n.addClass("correctChecked")):(i.prop("checked",!1),n.addClass("wrongChecked")))}function c(e,n){return jQuery(e.find(".check").get(n)).children("input")}function h(e,n){e.toggleClass("wrong",!n)}function d(){var e=D.filter(".wrong").length;return e?void b():void k()}function u(e){return v?v.findIndex(function(n){return e<n}):0}function f(){var e=n.find("thead span.exercise").length;n.find(".exerciseProgress").html(Math.min(S+1,e)+"  / "+e)}function m(){var e=n.find("thead span.exercise");return f(S),S<e.length&&(e.hide(),v?n.find(".elem").each(function(e,n){c(jQuery(n),u(S)).show(),c(jQuery(n),u(S)).attr("disabled",!1),c(jQuery(n),u(S)).filter(":checked").attr("disabled",!0);for(var i=0;i<u(S);i++)c(jQuery(n),i).attr("disabled",!0)}):w&&n.find("input").attr("checked",!1),$(e.get(S)).show(),!0)}function g(){return x.hide(),E.show(),n.find("input").attr("disabled",!0),v?(n.find("tr.elem").filter(function(e,n){var i=jQuery(n);return!i.find("input:not(:checked)").length}).addClass("incrementalFinalResult"),n.find(".beforeAllDone").hide(),void n.find(".afterAllDone").show()):void(Reveal&&Reveal.navigateNext())}function p(){var e={exercise:{}},i=n.find("thead span.exercise");if(!i.length)return y;var r=$(i.get(S)),t=r.data("feedbackCorrect"),s=r.data("feedbackWrong");return t&&(e.exercise.feedbackCorrect=t),s&&(e.exercise.feedbackWrong=s),a(y,e)}function k(){function e(){Reveal.removeEventListener("slidechanged",e);var n;(v||w)&&(S++,n=m()),n||g(),i.show(),r.remove()}var i=n.find("table");Reveal.addEventListener("slidechanged",e);var r=jQuery(s.resultCorrect(p())).on("click",e).css({height:i.height()+"px"}).appendTo(n);i.hide()}function b(){function e(){Reveal.removeEventListener("slidechanged",e),i.show(),r.remove()}var i=n.find("table");Reveal.addEventListener("slidechanged",e);var r=jQuery(s.resultWrong(p())).on("click",e).css({height:i.height()+"px"}).appendTo(n);i.hide()}var S=0;n=jQuery(n);var w=!!n.data("multiExercise"),v=n.data("incrementalExercise");if(v){v=v.split(";").map(function(e){return parseInt(e,10)});for(var z=1;z<v.length;z++)jQuery(n).find(".elem").each(function(e,n){c(jQuery(n),z).hide()})}var x=n.find(".send");x.on("click",i);var E=n.find(".reset");E.on("click",r);var D=n.find("table .elem"),M={exercise:{feedbackWrong:n.data("feedbackWrong"),feedbackCorrect:n.data("feedbackCorrect")}},y=a(l,M);D.on("click",t),D.find("input").on("change",function(){jQuery(this).prop("checked",!jQuery(this).prop("checked"))}),(v||w)&&m()}var a=i(3),t=i(4),s={resultCorrect:i(23)(t),resultWrong:i(24)(t)},l=i(25)("./"+$("html").attr("lang")+".js");e.exports=function(e){jQuery(e).each(r)}},function(e,n,i){var r,a;!function(t,s){r=s,a="function"==typeof r?r.call(n,i,n,e):r,!(void 0!==a&&(e.exports=a))}(this,function(){function e(e){var n=e&&"object"==typeof e;return n&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)}function n(e){return Array.isArray(e)?[]:{}}function i(i,r){var a=r&&r.clone===!0;return a&&e(i)?t(n(i),i,r):i}function r(n,r,a){var s=n.slice();return r.forEach(function(r,l){"undefined"==typeof s[l]?s[l]=i(r,a):e(r)?s[l]=t(n[l],r,a):n.indexOf(r)===-1&&s.push(i(r,a))}),s}function a(n,r,a){var s={};return e(n)&&Object.keys(n).forEach(function(e){s[e]=i(n[e],a)}),Object.keys(r).forEach(function(l){e(r[l])&&n[l]?s[l]=t(n[l],r[l],a):s[l]=i(r[l],a)}),s}function t(e,n,t){var s=Array.isArray(n),l=t||{arrayMerge:r},o=l.arrayMerge||r;return s?Array.isArray(e)?o(e,n,t):i(n,t):a(e,n,t)}return t.all=function(e,n){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce(function(e,i){return t(e,i,n)})},t})},function(e,n,i){e.exports=i(5).default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n.default=e,n}function t(){var e=new l.HandlebarsEnvironment;return f.extend(e,l),e.SafeString=c.default,e.Exception=d.default,e.Utils=f,e.escapeExpression=f.escapeExpression,e.VM=g,e.template=function(n){return g.template(n,e)},e}n.__esModule=!0;var s=i(6),l=a(s),o=i(20),c=r(o),h=i(8),d=r(h),u=i(7),f=a(u),m=i(21),g=a(m),p=i(22),k=r(p),b=t();b.create=t,k.default(b),b.default=b,n.default=b,e.exports=n.default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,n,i){this.helpers=e||{},this.partials=n||{},this.decorators=i||{},o.registerDefaultHelpers(this),c.registerDefaultDecorators(this)}n.__esModule=!0,n.HandlebarsEnvironment=a;var t=i(7),s=i(8),l=r(s),o=i(9),c=i(17),h=i(19),d=r(h),u="4.0.5";n.VERSION=u;var f=7;n.COMPILER_REVISION=f;var m={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};n.REVISION_CHANGES=m;var g="[object Object]";a.prototype={constructor:a,logger:d.default,log:d.default.log,registerHelper:function(e,n){if(t.toString.call(e)===g){if(n)throw new l.default("Arg not supported with multiple helpers");t.extend(this.helpers,e)}else this.helpers[e]=n},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,n){if(t.toString.call(e)===g)t.extend(this.partials,e);else{if("undefined"==typeof n)throw new l.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=n}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,n){if(t.toString.call(e)===g){if(n)throw new l.default("Arg not supported with multiple decorators");t.extend(this.decorators,e)}else this.decorators[e]=n},unregisterDecorator:function(e){delete this.decorators[e]}};var p=d.default.log;n.log=p,n.createFrame=t.createFrame,n.logger=d.default},function(e,n){"use strict";function i(e){return h[e]}function r(e){for(var n=1;n<arguments.length;n++)for(var i in arguments[n])Object.prototype.hasOwnProperty.call(arguments[n],i)&&(e[i]=arguments[n][i]);return e}function a(e,n){for(var i=0,r=e.length;i<r;i++)if(e[i]===n)return i;return-1}function t(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return u.test(e)?e.replace(d,i):e}function s(e){return!e&&0!==e||!(!g(e)||0!==e.length)}function l(e){var n=r({},e);return n._parent=e,n}function o(e,n){return e.path=n,e}function c(e,n){return(e?e+".":"")+n}n.__esModule=!0,n.extend=r,n.indexOf=a,n.escapeExpression=t,n.isEmpty=s,n.createFrame=l,n.blockParams=o,n.appendContextPath=c;var h={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},d=/[&<>"'`=]/g,u=/[&<>"'`=]/,f=Object.prototype.toString;n.toString=f;var m=function(e){return"function"==typeof e};m(/x/)&&(n.isFunction=m=function(e){return"function"==typeof e&&"[object Function]"===f.call(e)}),n.isFunction=m;var g=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===f.call(e)};n.isArray=g},function(e,n){"use strict";function i(e,n){var a=n&&n.loc,t=void 0,s=void 0;a&&(t=a.start.line,s=a.start.column,e+=" - "+t+":"+s);for(var l=Error.prototype.constructor.call(this,e),o=0;o<r.length;o++)this[r[o]]=l[r[o]];Error.captureStackTrace&&Error.captureStackTrace(this,i);try{a&&(this.lineNumber=t,Object.defineProperty?Object.defineProperty(this,"column",{value:s}):this.column=s)}catch(e){}}n.__esModule=!0;var r=["description","fileName","lineNumber","message","name","number","stack"];i.prototype=new Error,n.default=i,e.exports=n.default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){s.default(e),o.default(e),h.default(e),u.default(e),m.default(e),p.default(e),b.default(e)}n.__esModule=!0,n.registerDefaultHelpers=a;var t=i(10),s=r(t),l=i(11),o=r(l),c=i(12),h=r(c),d=i(13),u=r(d),f=i(14),m=r(f),g=i(15),p=r(g),k=i(16),b=r(k)},function(e,n,i){"use strict";n.__esModule=!0;var r=i(7);n.default=function(e){e.registerHelper("blockHelperMissing",function(n,i){var a=i.inverse,t=i.fn;if(n===!0)return t(this);if(n===!1||null==n)return a(this);if(r.isArray(n))return n.length>0?(i.ids&&(i.ids=[i.name]),e.helpers.each(n,i)):a(this);if(i.data&&i.ids){var s=r.createFrame(i.data);s.contextPath=r.appendContextPath(i.data.contextPath,i.name),i={data:s}}return t(n,i)})},e.exports=n.default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}n.__esModule=!0;var a=i(7),t=i(8),s=r(t);n.default=function(e){e.registerHelper("each",function(e,n){function i(n,i,t){c&&(c.key=n,c.index=i,c.first=0===i,c.last=!!t,h&&(c.contextPath=h+n)),o+=r(e[n],{data:c,blockParams:a.blockParams([e[n],n],[h+n,null])})}if(!n)throw new s.default("Must pass iterator to #each");var r=n.fn,t=n.inverse,l=0,o="",c=void 0,h=void 0;if(n.data&&n.ids&&(h=a.appendContextPath(n.data.contextPath,n.ids[0])+"."),a.isFunction(e)&&(e=e.call(this)),n.data&&(c=a.createFrame(n.data)),e&&"object"==typeof e)if(a.isArray(e))for(var d=e.length;l<d;l++)l in e&&i(l,l,l===e.length-1);else{var u=void 0;for(var f in e)e.hasOwnProperty(f)&&(void 0!==u&&i(u,l-1),u=f,l++);void 0!==u&&i(u,l-1,!0)}return 0===l&&(o=t(this)),o})},e.exports=n.default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}n.__esModule=!0;var a=i(8),t=r(a);n.default=function(e){e.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new t.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},e.exports=n.default},function(e,n,i){"use strict";n.__esModule=!0;var r=i(7);n.default=function(e){e.registerHelper("if",function(e,n){return r.isFunction(e)&&(e=e.call(this)),!n.hash.includeZero&&!e||r.isEmpty(e)?n.inverse(this):n.fn(this)}),e.registerHelper("unless",function(n,i){return e.helpers.if.call(this,n,{fn:i.inverse,inverse:i.fn,hash:i.hash})})},e.exports=n.default},function(e,n){"use strict";n.__esModule=!0,n.default=function(e){e.registerHelper("log",function(){for(var n=[void 0],i=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)n.push(arguments[r]);var a=1;null!=i.hash.level?a=i.hash.level:i.data&&null!=i.data.level&&(a=i.data.level),n[0]=a,e.log.apply(e,n)})},e.exports=n.default},function(e,n){"use strict";n.__esModule=!0,n.default=function(e){e.registerHelper("lookup",function(e,n){return e&&e[n]})},e.exports=n.default},function(e,n,i){"use strict";n.__esModule=!0;var r=i(7);n.default=function(e){e.registerHelper("with",function(e,n){r.isFunction(e)&&(e=e.call(this));var i=n.fn;if(r.isEmpty(e))return n.inverse(this);var a=n.data;return n.data&&n.ids&&(a=r.createFrame(n.data),a.contextPath=r.appendContextPath(n.data.contextPath,n.ids[0])),i(e,{data:a,blockParams:r.blockParams([e],[a&&a.contextPath])})})},e.exports=n.default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){s.default(e)}n.__esModule=!0,n.registerDefaultDecorators=a;var t=i(18),s=r(t)},function(e,n,i){"use strict";n.__esModule=!0;var r=i(7);n.default=function(e){e.registerDecorator("inline",function(e,n,i,a){var t=e;return n.partials||(n.partials={},t=function(a,t){var s=i.partials;i.partials=r.extend({},s,n.partials);var l=e(a,t);return i.partials=s,l}),n.partials[a.args[0]]=a.fn,t})},e.exports=n.default},function(e,n,i){"use strict";n.__esModule=!0;var r=i(7),a={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var n=r.indexOf(a.methodMap,e.toLowerCase());e=n>=0?n:parseInt(e,10)}return e},log:function(e){if(e=a.lookupLevel(e),"undefined"!=typeof console&&a.lookupLevel(a.level)<=e){var n=a.methodMap[e];console[n]||(n="log");for(var i=arguments.length,r=Array(i>1?i-1:0),t=1;t<i;t++)r[t-1]=arguments[t];console[n].apply(console,r)}}};n.default=a,e.exports=n.default},function(e,n){"use strict";function i(e){this.string=e}n.__esModule=!0,i.prototype.toString=i.prototype.toHTML=function(){return""+this.string},n.default=i,e.exports=n.default},function(e,n,i){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n.default=e,n}function t(e){var n=e&&e[0]||1,i=k.COMPILER_REVISION;if(n!==i){if(n<i){var r=k.REVISION_CHANGES[i],a=k.REVISION_CHANGES[n];throw new p.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+a+").")}throw new p.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function s(e,n){function i(i,r,a){a.hash&&(r=m.extend({},r,a.hash),a.ids&&(a.ids[0]=!0)),i=n.VM.resolvePartial.call(this,i,r,a);var t=n.VM.invokePartial.call(this,i,r,a);if(null==t&&n.compile&&(a.partials[a.name]=n.compile(i,e.compilerOptions,n),t=a.partials[a.name](r,a)),null!=t){if(a.indent){for(var s=t.split("\n"),l=0,o=s.length;l<o&&(s[l]||l+1!==o);l++)s[l]=a.indent+s[l];t=s.join("\n")}return t}throw new p.default("The partial "+a.name+" could not be compiled when running in runtime-only mode")}function r(n){function i(n){return""+e.main(a,n,a.helpers,a.partials,s,o,l)}var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=t.data;r._setup(t),!t.partial&&e.useData&&(s=d(n,s));var l=void 0,o=e.useBlockParams?[]:void 0;return e.useDepths&&(l=t.depths?n!=t.depths[0]?[n].concat(t.depths):t.depths:[n]),(i=u(e.main,i,a,t.depths||[],s,o))(n,t)}if(!n)throw new p.default("No environment passed to template");if(!e||!e.main)throw new p.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,n.VM.checkRevision(e.compiler);var a={strict:function(e,n){if(!(n in e))throw new p.default('"'+n+'" not defined in '+e);return e[n]},lookup:function(e,n){for(var i=e.length,r=0;r<i;r++)if(e[r]&&null!=e[r][n])return e[r][n]},lambda:function(e,n){return"function"==typeof e?e.call(n):e},escapeExpression:m.escapeExpression,invokePartial:i,fn:function(n){var i=e[n];return i.decorator=e[n+"_d"],i},programs:[],program:function(e,n,i,r,a){var t=this.programs[e],s=this.fn(e);return n||a||r||i?t=l(this,e,s,n,i,r,a):t||(t=this.programs[e]=l(this,e,s)),t},data:function(e,n){for(;e&&n--;)e=e._parent;return e},merge:function(e,n){var i=e||n;return e&&n&&e!==n&&(i=m.extend({},n,e)),i},noop:n.VM.noop,compilerInfo:e.compiler};return r.isTop=!0,r._setup=function(i){i.partial?(a.helpers=i.helpers,a.partials=i.partials,a.decorators=i.decorators):(a.helpers=a.merge(i.helpers,n.helpers),e.usePartial&&(a.partials=a.merge(i.partials,n.partials)),(e.usePartial||e.useDecorators)&&(a.decorators=a.merge(i.decorators,n.decorators)))},r._child=function(n,i,r,t){if(e.useBlockParams&&!r)throw new p.default("must pass block params");if(e.useDepths&&!t)throw new p.default("must pass parent depths");return l(a,n,e[n],i,0,r,t)},r}function l(e,n,i,r,a,t,s){function l(n){var a=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],l=s;return s&&n!=s[0]&&(l=[n].concat(s)),i(e,n,e.helpers,e.partials,a.data||r,t&&[a.blockParams].concat(t),l)}return l=u(i,l,e,s,r,t),l.program=n,l.depth=s?s.length:0,l.blockParams=a||0,l}function o(e,n,i){if(e)e.call||i.name||(i.name=e,e=i.partials[e]);else if("@partial-block"===i.name){for(var r=i.data;r["partial-block"]===h;)r=r._parent;e=r["partial-block"],r["partial-block"]=h}else e=i.partials[i.name];return e}function c(e,n,i){i.partial=!0,i.ids&&(i.data.contextPath=i.ids[0]||i.data.contextPath);var r=void 0;if(i.fn&&i.fn!==h&&(i.data=k.createFrame(i.data),r=i.data["partial-block"]=i.fn,r.partials&&(i.partials=m.extend({},i.partials,r.partials))),void 0===e&&r&&(e=r),void 0===e)throw new p.default("The partial "+i.name+" could not be found");if(e instanceof Function)return e(n,i)}function h(){return""}function d(e,n){return n&&"root"in n||(n=n?k.createFrame(n):{},n.root=e),n}function u(e,n,i,r,a,t){if(e.decorator){var s={};n=e.decorator(n,s,i,r&&r[0],a,t,r),m.extend(n,s)}return n}n.__esModule=!0,n.checkRevision=t,n.template=s,n.wrapProgram=l,n.resolvePartial=o,n.invokePartial=c,n.noop=h;var f=i(7),m=a(f),g=i(8),p=r(g),k=i(6)},function(e,n){(function(i){"use strict";n.__esModule=!0,n.default=function(e){var n="undefined"!=typeof i?i:window,r=n.Handlebars;e.noConflict=function(){return n.Handlebars===e&&(n.Handlebars=r),e}},e.exports=n.default}).call(n,function(){return this}())},function(e,n){"use strict";e.exports=function(e){return e.template({1:function(e,n,i,r,a){var t;return'<div class="correct">'+e.escapeExpression(e.lambda(null!=(t=null!=n?n.exercise:n)?t.correct:t,n))+"</div>"},compiler:[7,">= 4.0.0"],main:function(e,n,i,r,a){var t,s=e.lambda;return'<div class="resultOverlay correct">\n    <div class="waiter"></div>\n    <div class="cup"></div>\n    <div class="smoke"></div>\n    <div class="feedback">'+(null!=(t=s(null!=(t=null!=n?n.exercise:n)?t.feedbackCorrect:t,n))?t:"")+"</div>\n    "+(null!=(t=i.blockHelperMissing.call(n,s(null!=(t=null!=n?n.exercise:n)?t.feedbackCorrect:t,n),{name:"exercise.feedbackCorrect",hash:{},fn:e.noop,inverse:e.program(1,a,0),data:a}))?t:"")+'\n    <div class="next">'+e.escapeExpression(s(null!=(t=null!=n?n.exercise:n)?t.next:t,n))+"</div>\n</div>"},useData:!0})}},function(e,n){"use strict";e.exports=function(e){return e.template({1:function(e,n,i,r,a){var t;return'<div class="wrong">'+e.escapeExpression(e.lambda(null!=(t=null!=n?n.exercise:n)?t.wrong:t,n))+"</div>"},compiler:[7,">= 4.0.0"],main:function(e,n,i,r,a){var t,s=e.lambda;return'<div class="resultOverlay wrong">\n    <div class="waiter"></div>\n    <div class="feedback">'+(null!=(t=s(null!=(t=null!=n?n.exercise:n)?t.feedbackWrong:t,n))?t:"")+"</div>\n    "+(null!=(t=i.blockHelperMissing.call(n,s(null!=(t=null!=n?n.exercise:n)?t.feedbackWrong:t,n),{name:"exercise.feedbackWrong",hash:{},fn:e.noop,inverse:e.program(1,a,0),data:a}))?t:"")+'\n    <div class="retry">'+e.escapeExpression(s(null!=(t=null!=n?n.exercise:n)?t.retry:t,n))+"</div>\n</div>"},useData:!0})}},function(e,n,i){function r(e){return i(a(e))}function a(e){return t[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var t={"./de.js":26,"./en.js":27};r.keys=function(){return Object.keys(t)},r.resolve=a,e.exports=r,r.id=25},function(e,n){"use strict";e.exports={lang:{de:"de"},exercise:{info:"Sie können nun diese Tipps im Recherchecafé ausprobieren. Aber Achtung! Im Recherchecafé bekommen Sie nur das, was Sie bestellen. Das ist nicht immer das, was Sie auch wünschen und manchmal bekommen Sie vielleicht auch gar nichts.",shortInfo:"Sie können nun diese Tipps im Recherchecafé ausprobieren.",submit:"Bestellen",reset:"Zurücksetzen",next:"Weiter!",correct:"Richtig!",wrong:"Falsch!",retry:"Nochmal!",pleaseOrder:"Bitte markieren Sie alles, was Sie bekommen.",drinks:{cafeAuLait:{title:"Café au Lait",desc:"Kaffee mit Milch in einer Boule, Zucker separat",keywords:"Kaffee, Milch, Schale, Zucker"},"Einspänner":{title:"Einspänner",desc:"Doppelmokka im Glas mit Schlagobershaube und Hohlhippe",keywords:"Glas, Mokka, Schlagsahne, Waffel"},Eiskaffee:{title:"Eiskaffee englisch",desc:"ein Drittel Kaffee, ein Drittel Eis, ein Drittel Obers",keywords:"Eis, Glas, Kaffee, Schlagsahne"},Fiaker:{title:"Fiaker",desc:"Doppelmokka im Henkelglas mit einem Schuss Kirschwasser gespritzt, mit Schlagobershaube und Cocktailkirsche",keywords:"Cocktailkirsche, Glas, Kirschwasser, Mokka, Schlagsahne"},Franziskaner:{title:"Franziskaner",desc:"leichte Melange mit Schlagobers und Schokostreuseln",keywords:"Glas, Kaffee, Milch, Schlagsahne, Schokolade"},"Häferlkaffee":{title:"Häferlkaffee",desc:"Großer Brauner (doppelter Mokka mit Kaffeeobers) im Häferl statt in der großen Schale",keywords:"Becher, Kaffeesahne, Mokka"},"Kännchen":{title:"Kännchen Kaffee",desc:"Kaffee im Kännchen (ca. 2 Tassen), separat Kaffeesahne und Zucker",keywords:"Kaffee, Kaffeesahne, Kaffeekanne, Tasse, Zucker"},Kleiner:{title:"Kleiner Brauner",desc:"einfacher Mokka mit Milch oder Obers in kleiner Schale",keywords:"Kaffeesahne, Mokka, Tasse"},Latte:{title:"Latte Macchiato",desc:"“gefleckte Milch”, aufgeschäumte warme Milch mit Espresso",keywords:"Espresso, Glas, Milch"},Maria:{title:"Maria Theresia",desc:"ein großer Mokka mit einem Schuss Orangenlikör, Schlagobershaube und verziert mit Orangenzesten",keywords:"Apfelsinenschale, Glas, Mokka, Orangenlikör, Schlagsahne"},Melange:{title:"Melange",desc:"halb Kaffee, halb heiße geschäumte Milch, mit Milchschaumhäubchen",keywords:"Glas, Kaffee, Milch"},Milchkaffee:{title:"Milchkaffee",desc:"Kaffee mit Milch(-Schaum)"},"Pharisäer":{title:"Pharisäer",desc:"schwarzer Kaffee mit Rum und einer Haube Schlagsahne überdeckt mit Schokoraspeln auf der Sahne serviert",keywords:"Becher, Kaffee, Rum, Schlagsahne, Schokolade"},"Rüdesheimer":{title:"Rüdesheimer Kaffee",desc:"Kaffee mit Weinbrand flambiert, mit einem Schlag Sahne, Vanillezucker und Schokoladestreusel",keywords:"Glas, Kaffee, Schlagsahne, Schokolade, Vanillezucker, Weinbrand"},"TürkKahvesi":{title:"Türk Kahvesi",desc:"feinst gemahlener Kaffee, mit Zucker im Kupferkännchen aufgekocht",keywords:"Kaffee, Kupferkanne, Tasse, Zucker"},Verkehrter:{title:"Verkehrter",desc:"Kaffee mit 2/3 Milch und 1/3 Kaffee"},"Verlängerter":{title:"Verlängerter",desc:"die Dosierung eines kleinen Schwarzen wird mit der Wassermenge eines großen Schwarzen zubereitet"},Wiener:{title:"Wiener Eiskaffee",desc:"köstliches Vanilleeis, doppelter Mokka, Schlagobershaube, Kaffeebohne und Hohlhippe",keywords:"Glas, Kaffeebohne, Mokka, Schlagsahne, Vanilleeis, Waffel"}}},page:[{headline:"Lernziele",intro:"Dieses Grundlagenmodul wird Sie unterstützen, erfolgreicher nach Literatur für Ihr Studium zu recherchieren.",principles:"Dabei geht es um folgende Prinzipien und Techniken einer Recherche:",content:["formale oder inhaltliche Recherchen","Trunkieren","Verknüpfen","Phrase","Schlagwort","Klassifikation"],rechercheCafeIntro:"Lesen Sie zunächst die Erläuterungen zu jedem Thema. Im Anschluss können Sie die Tipps gleich im Recherchecafé* ausprobieren. Aber Achtung! Im Recherchecafé* bekommen Sie nur das, was Sie bestellen, und das ist nicht immer das, was Sie auch wünschen.",rechercheCafeIdee:"* Das Recherchecafé wurde von der Idee des Boole`schen Restaurants inspiriert, vgl. Donald A. Barclay: Teaching the standard features of electronic databases. In: Teaching electronic information literacy : a how-to-do-it manual / ed. by Donald A. Barclay. New York: Neal-Schuman, 1995. S. 65 sowie Detlev Bieler, Thomas Hapke, Oliver Marahrens, TUB Hamburg-Harburg: DISCUS"},{headline:"Formale, inhaltliche und feldbezogene Suche",formalVsContent:"Zu Beginn Ihrer Recherche sollten Sie sich verdeutlichen, ob Sie formal oder inhaltlich (sachlich, thematisch) suchen:",formalHeader:"Formale Suche",formalExplanation:"Bei einer formalen Suche haben Sie (mehr oder weniger vollständige) Angaben einer Quelle, z.B. aus einer Literaturliste oder durch den Tipp eines Professors. Die genaue Eingabe dieser Angaben führt schnell zu einem Nachweis, ob diese Quelle für Sie verfügbar ist. Die meisten Ressourcen tolerieren allerdings keine Tippfehler.",contentHeader:"Inhaltliche Suche",contentExplanation:"Bei einer inhaltlichen Suche kennen Sie die Quelle nicht genau und wissen nicht, ob Sie die richtigen Suchbegriffe gewählt haben, ob es überhaupt Quellen zu dem gesuchten Thema gibt, und wenn ja, wie viele.",fieldHeader:"Feldbezogene Suche",FieldContent:'Die meisten Ressourcen bieten neben der Freitextsuche in allen Feldern - zumindest in der Option „erweiterte Suche“ - eine feldbezogene Suche an. In der formalen Suche ist die Nutzung des Feldes "Autor" vorteilhaft, wenn der Autorenname auch ein Titelstichwort sein kann. In der inhaltlichen Suche ist die Nutzung der Felder "Schlagwort" und "Klassifikation" vorteilhaft. Dazu mehr in späteren Abschnitten.',nextPage:"Auf der folgenden Seite finden Sie Beispiele für formale Suchen."},{headline:"Beispiele - Formale Suche",intro:'1. In einer Literaturliste finden Sie die Angaben „Nicholas Gregory Mankiw: Grundzüge der Volkswirtschaftslehre. 4. Aufl. Schäffer-Poeschel, 2008“: Im Bibliothekskatalog finden Sie das gewünschte Buch wenn Sie im Feld <span class="fieldName">Alle Wörter</span> jedes beliebige Stichwort aus diesen Angaben eingeben, z.B.',introExamples:["Mankiw, Nicholas Gregory","Volkswirtschaftslehre Nicholas","volkswirtschaftslehre grundzüge"],professorRecommendation:'2. Ihr Professor empfiehlt Ihnen in Fragen des bibliothekarischen Grundwissens (z.B. Was ist ein Stichwort?) im „Hacker“ nachzuschlagen: Wenn Sie nun im Bibliothekskatalog <span class="searchPhrase">Hacker</span> über das Feld <span class="fieldName">Alle Wörter</span> suchen, werden Sie viele Treffer erzielen, die nichts mit der gesuchten Person zu tun haben, sondern mit IT-Spezialisten.',authorHacker:'Wenn Sie hingegen im Feld "Person, Autor" den Suchbegriff "Hacker" eingeben, finden Sie nur Bücher, deren Autor ein Mensch namens Hacker ist. – Übrigens: Die meisten Ressourcen verlangen im Feld Autor die Ansetzung „Nachname, Vorname“, also',authorHackerExamples:["Mankiw, Nicholas","Hacker, Rupert"],or:"oder",outro:"Prüfen Sie in den Hilfetexten der jeweiligen Ressource, wie Namen angesetzt werden."},{headline:"Übung - formale Suche 1",explanation:'Da Sie formale Angaben kennen, machen Sie eine formale Suche und bestellen mit der Eingabe <span class="searchPhrase">pharisäer</span>.',wrong:"Ein bisschen mehr Ernsthaftigkeit, bitte!<br/>Es wird gleich schwieriger.<br/>Genau eine Antwort ist richtig."},{headline:"Übung - formale Suche 2",explanation:'Sie bekommen von einem Kommilitonen mündlich den Hinweis auf eine italienische Kaffespezialität und bestellen mit der Eingabe <span class="searchPhrase">latte macciato</span>.',correct:"Genau! Sie bekommen nichts aus der Liste.<br/>Bei der Suche kommt es darauf an, dass die Wörter korrekt geschrieben sind.",wrong:"Schauen Sie nochmal genau nach. Denken Sie daran, dass es bei der Suche wichtig ist, dass alle Wörter korrekt geschrieben sind. Und denken Sie daran, manchmal ist auch keine der Antworten richtig."},{headline:"Trunkieren",intro:"Das Trunkierungszeichen (auch Wildcard-Operator, Joker oder Platzhalter genannt) ersetzt bei der Suchanfrage",introList:["einen Buchstaben","keinen bis zu einer beliebigen Anzahl von Buchstaben"],or:"oder",asterisk:"In den meisten Ressourcen wird das Sternchen (Asterisk, *) verwendet, in anderen !, ?, $ oder #. Prüfen Sie in jeder Ressource in den Hilfetexten, welches Zeichen für welche Abkürzung verwendet wird.",rightTruncation:"In den meisten Ressourcen ist die Rechts- oder Endtrunkierung möglich, in einigen zusätzlich die Links- oder Anfangstrunkierung.",examples:"Beispiele",exampleSearchQuestionmarkIntro:'Sie geben in eine Ressource <span class="searchPhrase">me?er</span> ein und erhalten Treffer, in denen folgende Worte vorkommen:',exampleSearchQuestionmarkList:["Meier","Meyer","Meter"],andAlso:"aber auch",truncationQuestionmarkSummary:"Im Hilfetext steht: Das Trunkierungszeichen ? ersetzt einen Buchstaben",exampleSearchAsteriskIntro:'Sie geben in einer Ressource <span class="searchPhrase">wirtschaft*</span> ein und erhalten Treffer, in denen z.B. folgende Worte vorkommen, z.B.',exampleSearchAsteriskList:["Wirtschaft","Wirtschafts-","Wirtschaftrecht"],exampleSearchDoubleAsteriskIntro:'Sie geben in einer Ressource <span class="searchPhrase">*wirtschaft*</span> ein und erhalten zusätzlich Treffer, in denen z.B. folgende Worte vorkommen:',exampleSearchDoubleAsteriskList:["Wirtschaft","Betriebswirtschaftslehre","Hauswirtschaftlerin"],truncationAsteriskSummary:"Im Hilfetext steht: Das Trunkierungszeichen * ersetzt keinen bis zu einer beliebigen Anzahl von Buchstaben vor und/oder nach dem von Ihnen eingegebenen Wort.",outro:"Wenn Sie Suchbegriffe trunkieren, erhalten Sie eine größere Treffermenge, als wenn Sie das nicht tun."},{headline:"Übung",explanation:'Sie wünschen Kaffee mit Schlagsahne oder Schlagobers und bestellen mit der Eingabe <span class="searchPhrase">schlag*</span>.<br/>Das * ersetzt eine beliebige Anzahl von Buchstaben am Ende des Suchbegriffs.',wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe <span class="searchPhrase">schlag*</span> 7 Spezialitäten von unserer Karte.'},{headline:"Verknüpfen",intro:"Eine Form der Verknüpfung kennen Sie aus dem Umgang mit Suchmaschinen: Wenn Sie mehrere Suchbegriffe, durch Leerzeichen voneinander getrennt, hintereinander schreiben, erhalten Sie Treffer, in denen alle Suchbegriffe vorkommen, unabhängig von der Reihenfolge und den Zusammenhängen. In manchen Ressourcen werden diese Verknüpfungs-Operatoren durch Zeichen oder Wörter dargestellt, in manchen durch Felder zum Anklicken.",importantOperators:"Nachfolgend finden Sie die wichtigsten Verknüpfungsoperatoren und Beispiele.",andOperators:{headline:"1. Leerzeichen, +, UND, und, AND, and",explanation:"Dieser Verknüpfungsoperator findet alle Treffer, in denen alle verknüpften Suchbegriffe vorkommen.",exampleHeadline:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">mankiw UND volkswirtschaftslehre</span> findet',exampleResult:["Mankiw: Grundzüge der Volkswirtschaftslehre"]},orOperators:{headline:"2. /, ODER, oder, OR, or",explanation:"Dieser Verknüpfungsoperator findet alle Treffer, in denen mindestens ein Suchbegriff vorkommt.",attention:"Achtung!",attentionText:"Anders als im normalen Sprachgebrauch handelt es sich hier nicht um ein exklusives ODER („Christin oder Jakob machen den Abwasch“), sondern um ein inklusives ODER („Christin oder Jakob oder beide …“)!",exampleHeadline:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">mankiw ODER volkswirtschaftslehre</span> findet',exampleResult:["Mankiw: Makroökonomik – mit vielen Fallbeispielen","Ending: Volkswirtschaftslehre – schnell erfasst","Mankiw: Grundzüge der Volkswirtschaftslehre"]},notOperators:{headline:"3. -, NICHT, nicht, NOT, not",
explanation:"Dieser Verknüpfungsoperator findet alle Treffer, in denen der markierte Suchbegriff nicht vorkommt.",attention:"Vorsicht!",attentionText:"Sie schließen dabei möglicherweise interessante Treffer aus, weil zufällig der Suchbegriff in ihm vorkommt!",example:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">volkswirtschaftslehre NICHT mankiw</span> findet',exampleResult:["Ending: Volkswirtschaftslehre – schnell erfasst"]},nearOperators:{headline:"4. NEAR, Within, Adj(acent)",explanation:"Dieser Verknüpfungsoperator legt die maximalen Abstände zwischen den Suchbegriffen und eventuell ihre Reihenfolge fest. Siehe Hilfetexte der Ressourcen!",example:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">gesellschaft w/2 medien</span> (w/2 bedeutet, dass nicht mehr als 2 Worte zwischen den Suchbegriffen liegen) findet:',exampleResult:["Müller: Gesellschaft und Medien","Ziemann: Medien der Gesellschaft – Gesellschaft der Medien","Kamps: Die offene Gesellschaft und ihre Medien"]}},{headline:"Verknüpfen mit unterschiedlichen Operatoren",exampleHeadline:"Beispiele",preCombination:{explanation:"Wollen Sie mehr als zwei Suchbegriffe mit unterschiedlichen Operatoren verknüpfen, so müssen Sie Klammern setzen, um deutlich zu machen, in welcher Reihenfolge die Verknüpfungen abgearbeitet werden sollen.",exampleResult:["(qualitätsmanagement ODER qm) UND sozial*","(qualitätsmanagement ODER qm) UND („soziale arbeit“ ODER sozialarbeit)"],exampleExplanation:"Damit haben Sie die Suche präkombiniert, d.h. Sie haben die Suche vor der Abfrage vollständig formuliert."},postCombination:{explanation:"Eine andere Methode ist die Postkoordination: Dabei führen Sie die Abfragen nacheinander einzeln durch, rufen die Suchgeschichte auf und koordinieren die Ergebnisse im Nachhinein. Manchmal ist es günstiger, die Treffermengen nach und nach einzuschränken.",exampleIntro:"Sie führen nacheinander die Suche nach den folgenden Begriffen durch:",exampleResult:["qualitätsmanagement => Ergebnis 1","qm => Ergebnis 2","„soziale arbeit“ => Ergebnis 3","Sozialarbeit => Ergebnis 4"],exampleExplanation:"Sie rufen die Suchgeschichte auf und koordinieren diese vier Ergebnisse im Nachhinein:",exampleCombinationResult:["Ergebnis 1 ODER Ergebnis 2 => Ergebnis 5","Ergebnis 3 ODER Ergebnis 4 => Ergebnis 6"],exampleFinalCombination:"Nun koordinieren Sie auch noch die Ergebnisse der Suchen 5 und 6:",exampleFinalCombinationResult:["Ergebnis 5 UND Ergebnis 6 = Ergebnis 7"],exampleOutro:"Das Ergebnis der postkoordinierten Suche ist dasselbe wie das Ergebnis der 2. präkombinierten Suche."}},{headline:"Übung - UND",explanation:'Sie wünschen Kaffee mit Sahne und bestellen mit der Eingabe <span class="searchPhrase">kaffee UND sahne</span>.',wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe <span class="searchPhrase">kaffee UND sahne</span> 2 Spezialitäten von unserer Karte.'},{headline:"Übung - ODER",explanation:'Sie wünschen Kaffee mit Schlagsahne oder Schlagobers<br/> und bestellen mit der Eingabe <span class="searchPhrase">schlagsahne ODER schlagobers</span>.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe schlagsahne ODER schlagobers 2 Spezialitäten von unserer Karte."},{headline:"Übung - Präkombination 1",explanation:'Sie wünschen Kaffee oder Mokka mit Sahne oder Obers. Sie formulieren Ihren Wunsch vollständig vor der Bestellung und bestellen mit der Eingabe <span class="searchPhrase">(kaffee ODER mokka) UND (sahne ODER obers)</span>.',wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe "(kaffee ODER mokka) UND (sahne ODER obers)" 4 Spezialitäten von unserer Karte.'},{headline:"Übung - Präkombination 2",explanation:'Sie wünschen Kaffee oder Mokka mit Sahne oder Obers. Sie formulieren Ihren Wunsch vollständig vor der Bestellung und bestellen mit der Eingabe <span class="searchPhrase">(*kaffee* ODER *mokka*) UND (*sahne* ODER *obers*)</span>. Aber Achtung: Bei dieser Bestellung ändert sich das Ergebnis durch die Sternchen in Ihrer Eingabe!',allDone:"Sie wollten Kaffee oder Mokka mit Sahne oder Obers bestellen. Wenn Sie nun die Postkoordination durchführen, erhalten Sie die richtige Bestellung. Es sind die Getränke bestellen, bei denen in beiden Spalten die Häkchen aktiviert sind.",wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe "(*kaffee* ODER *mokka*) UND (*sahne* ODER *obers*)" 10 Spezialitäten von unserer Karte.'},{headline:"Übung - Postkoordination",intro:"Sie können nun diese Tipps im Recherchecafé ausprobieren. Aber Achtung! Im Recherchecafé bekommen Sie nur das, was Sie bestellen. Das ist nicht immer das, was Sie auch wünschen und manchmal bekommen Sie vielleicht auch gar nichts.",allDone:'Mit dieser nachträglichen Koordination der Suchbegriffe haben Sie dasselbe Ergebnis erzielt wie mit der präkombinierten Suche <span class="searchPhrase">(kaffee ODER mokka)</span> UND <span class="searchPhrase">(sahne ODER obers)</span>.',explanation:"Sie erinnern sich: Bei der Postkoordination führen Sie die einzelnen Suchen nacheinander aus und schränken die Treffermenge dann nach und nach ein. Sie wünschen Kaffee oder Mokka mit Sahne oder Obers.",tasks:[{task:'Sie bestellen zunächst mit der Eingabe <span class="searchPhrase">kaffee</span>.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die Eingabe von kaffee 9 Spezialitäten von unserer Karte.",correct:"Richtig! Führen Sie nun die nächste Eingabe aus."},{task:'Im nächsten Schritt Ihrer Bestellung markieren Sie nun zusätzlich alles, was Sie mit der Eingabe <span class="searchPhrase">mokka</span> bekommen.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die zusätzliche Eingabe von mokka 4 zusätzliche Spezialitäten von unserer Karte.",correct:"Richtig! Führen Sie nun die nächste Eingabe aus."},{task:'Im nächsten Schritt Ihrer Bestellung markieren Sie nun zusätzlich zur bestehenden Auswahl kaffee ODER mokka, was Sie mit der Eingabe <span class="searchPhrase">sahne</span> bekommen.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die Eingabe von sahne 2 Spezialitäten von unserer Karte.",correct:"Richtig! Führen Sie nun die nächste Eingabe aus."},{task:'Im nächsten Schritt Ihrer Bestellung markieren Sie nun zusätzlich zur bestehenden Auswahl, was Sie mit der Eingabe <span class="searchPhrase">obers</span> bekommen.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die Eingabe von obers 2 Spezialitäten von unserer Karte.",correct:"Richtig! Sie haben nun alle Eingaben einzeln nacheinander ausgeführt. Es ist an der Zeit, diese nun zu koordinieren."}]},{headline:"Phrasenbildung",intro:"Die Phrasensuche kennen Sie aus dem Umgang mit Suchmaschinen: Wenn Sie eine bestimmte Wortfolge in Anführungszeichen setzen, bekommen Sie Treffer, in denen genau diese Wortfolge vorkommt. Wenn Sie die Anführungszeichen weglassen, bekommen Sie hingegen Treffer, in denen die Worte unabhängig von der Reihenfolge vorkommen.",explanation:"Manche Ressourcen erlauben das Setzen eines Trunkierungszeichens (Wildcard-Operator, Joker, Platzhalter, s.o.) innerhalb der Phrasensuche. Es ersetzt dann nicht einen oder mehrere Buchstaben, sondern ein Wort. Es gibt auch gelegentlich Abstandsoperatoren, mit denen Sie den Abstand festlegen können, der maximal zwischen zwei Teilen einer Phrase liegen darf. Bitte lesen Sie die Hilfetexte der jeweiligen Ressource, um diese Suchformulierung zu erfahren.",exampleHeadline:"Beispiele",exampleExplanation:'Mit der Eingabe <span class="searchPhrase">"grundzüge der volkswirtschaftslehre"</span> im Feld <span class="fieldName">alle Wörter</span> erhalten Sie u.a.',exampleResults:["Mankiw: Grundzüge der Volkswirtschaftslehre","Wienert: Grundzüge der Volkswirtschaftslehre","Hermann: Arbeitsbuch Grundzüge der Volkswirtschaftslehre"],examplePlusExplanation:'Mit der Eingabe <span class="searchPhrase">"gesellschaft * medien"</span> im Feld <span class="fieldName">Titel</span> erhalten Sie u.a.:',examplePlusResults:["Müller: Gesellschaft und Medien","Ziemann: Medien der Gesellschaft – Gesellschaft der Medien","Gottwald: Alte Gesellschaft – neue Medien","Langenbucher: Gesellschaft, elektronische Medien und Demokratie","<strong>Aber nicht:</strong> Kamps: Die offene Gesellschaft und ihre Medien, weil * nur ein Wort ersetzt."]},{headline:"Schlagwort",intro:["Manche Ressourcen bieten eine Schlagwortsuche an, auf Englisch werden dafür die Benennungen „Descriptor“, „Subject (Term)“ und gelegentlich „Keyword“ benutzt.","Gemeint ist damit, dass eine Indexiererin oder ein Indexierer den Inhalt eines Dokuments mit Schlagworten beschreibt, die unabhängig von der Terminologie des Dokuments sind. Die Schlagworte werden einer Wortliste mit kontrolliertem Vokabular (einem Thesaurus) entnommen und sind damit standardisiert. So wird in deutschsprachigen Schlagwortsystemen durchweg die Einzahl verwendet, in englischsprachigen überwiegend die Mehrzahl. Homonyme werden durch Zusätze eindeutig gemacht („Krebs <Tier>“, „Krebs <Erkrankung>“) und Synonyme werden vermieden.","Die Suche mit Schlagworten führt zu besseren Ergebnissen, weil nach Inhalten gesucht wird und nicht nach Begriffen, die zufällig auch in dem Dokument vorkommen, aber wenig mit dem Inhalt des Dokuments zu tun haben.","Welches Schlagwort für welchen Zusammenhang benutzt wird, erfahren Sie beispielsweise, indem Sie mit Stichworten Zufallstreffer erzielen und die Schlagworte, die für diese Zufallstreffer vergeben wurden, notieren und mit ihnen eine neue Suche starten."],exampleHeadline:"Beispiel",examples:[{intro:'Mit der Eingabe <span class="searchPhrase">total quality management</span> im Feld <span class="fieldName">Alle Wörter</span> finden Sie u.a.',result:["Saint Clair: Total quality management in information services"],outro:"In den Metadaten dieses Dokuments sehen Sie, dass für diese Quelle  u.a. das Schlagwort “Qualitätsmanagement” vergeben wurde."},{intro:'Mit der Eingabe <span class="searchPhrase">Qualitätsmanagement</span> im Feld <span class="fieldName">Schlagwörter</span> finden Sie auch',result:["Pfaff: ISO 9001:2008 : Basis für praxisgerechte Managementsysteme","Osterhage: Abnahme komplexer Software-Systeme : das Praxishandbuch","Feldmann: Montage in der Leistungselektronik für globale Märkte : Design, Konzepte, Strategien"]}]},{headline:"Übung",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Sie erhalten 4 Spezialitäten von unserer Karte.",explanation:'Sie wünschen Kaffee im Glas und bestellen mit der Eingabe <span class="searchPhrase">Kaffee UND Glas</span> im Feld <span class="fieldName">Schlagworte</span>.'},{headline:"Klassifikation",intro:["Manche Ressourcen bieten die Suchmöglichkeit mit der Hilfe einer Klassifikation oder Systematik (classification, subject). Dafür ordnet eine Indexiererin oder ein Indexierer die Dokumente in Klassen an. Jedes Dokument in einer Klasse hat dabei mindestens ein inhaltliches Merkmal, das es mit allen Dokumenten der Klasse gemeinsam hat und das sich unterscheidet von den Merkmalen der Dokumente der anderen Klassen. Jede Klasse hat eine eigene Benennung, die mit einer Notation verschlüsselt wird.","Sie kennen Systematiken als Stammbaum in der Biologie und als Aufstellungssystematik in der Bibliothek. Wenn Sie ein Buch im Regal gefunden haben, das inhaltlich Ihren Vorstellungen entspricht, dann sehen Sie sich auch die Bücher links und rechts von dem gefundenen an, denn die behandeln wahrscheinlich das gleiche Thema.","In einer Bibliothek steht ein Buch immer nur an einer Stelle, auch wenn es inhaltlich an zwei Stellen stehen könnte. In virtuellen Systematiken kann ein Dokument auch mehreren Klassen zugeordnet werden. Sie suchen mit der Hilfe einer Klassifikation, ähnlich wie mit Schlagworten, nach Inhalten und nicht nach zufälligen Stichworten. Die klassifikatorische Suche wird zumeist als Unterstützung anderer Recherchen eingesetzt, beispielsweise zur Einschränkung einer großen Treffermenge auf einen fachlichen Zusammenhang."],exampleHeadline:"Beispiel",examples:[{intro:['Mit der Eingabe <span class="searchPhrase">Qualitätsmanagement</span> im Feld <span class="fieldName">Alle Wörter</span> finden Sie u.a.'],results:["Qualitätsmanagement DIN EN ISO 9000 ff : Dokumentensammlung – mit der Signatur „Bwl 024 118“"]},{intro:["Die Klasse mit der Notation Bwl 024 wurde Qualitätsmanagement benannt. In den Regalen mit der Bezeichnung Bwl 024 finden Sie also Bücher zum gleichen Thema und zwar nur die, die nicht ausgeliehen sind. Im Katalog können Sie zusätzlich feststellen, welche Bücher zum Thema derzeit ausgeliehen sind.",' Mit der Eingabe <span class="searchPhrase">Bwl 024*</span> (Trunkierung) im Feld <span class="fieldName">Signatur</span> erhalten Sie alle Treffer, die der Klasse Qualitätsmanagement zugeordnet wurden, u.a.'],results:["Suganthi: Total Quality Management","European Foundation for Quality Management: Excellence einführen","Loch: Industrial excellence : management quality in manufacturing"]}]},{headline:"Übung",explanation:" Markieren Sie nun für folgende Spezialität die richtige Klasse:",tasks:[{task:"<b>Türk Kahvesi</b> - <i>feinst gemahlener Kaffee, mit Zucker im Kupferkännchen aufgekocht</i>",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Die Spezialität ist genau einer richtigen Klasse zuzuordnen.",correct:"Richtig! Dann schauen wir mal, ob Sie auch die folgende Spezialität der richtigen Klasse zuordnen können."},{task:"<b>Wiener Eiskaffee</b> - <i>köstliches Vanilleeis, doppelter Mokka, Schlagobershaube, Kaffeebohne und Hohlhippe</i>",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Die Spezialität ist genau einer richtigen Klasse zuzuordnen.",correct:"Richtig! Dann schauen wir mal, ob Sie auch die folgende Spezialität der richtigen Klasse zuordnen können."},{task:"<b>Fiaker</b> - <i>Doppelmokka im Henkelglas mit einem Schuss Kirschwasser gespritzt, mit Schlagobershaube und Cocktailkirsche</i>",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Die Spezialität ist genau einer richtigen Klasse zuzuordnen."}]},{headline:"Danke",relax:"... für das Mitmachen. Hoffentlich war diese Übung nützlich für Sie.",thanks:"Zur Entspannung der Magennerven"},{headline:"Feedback",intro:"Bitte markieren Sie mit einem Mausklick den Punkt, der ihrer Meinung entspricht.",enjoyed:"Ich kann von dem Modul gebrauchen",learned:"Ich habe Neues erfahren",bad:"nichts",good:"sehr viel"},{headline:"Impressum",email:"E-Mail",projectTitle:"Projekt:",authorTitle:"Autor:",designTitle:"Design:",productionTitle:"Produktion:",iconsTitle:"Icons:",iconsContent:'CC 3.0 BY <a href="http://www.flaticon.com/packs/material-design">Material UI by Google</a>',origin:' ursprünglich produziert im Rahmen des Projekts "Competence Cluster Medienkonzeption und netzgestütztes Lehren und Lernen CCM>L", finanziert durch Studiengebühren der Hochschule für Angewandte Wissenschaften Hamburg.',license:{header:"Lizenzen",contentTitle:"Inhalt:",contentContent:'<a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a><br/>',codeTitle:"Code:",codeContent:'<a href="https://opensource.org/licenses/MIT">MIT</a>'}}],feedbackConfirmBox:{yes:"Bestätigen",no:"Nein, doch nicht",thanks:"Vielen Dank!"}}},function(e,n){"use strict";e.exports={lang:{en:"en"},exercise:{info:"Sie können nun diese Tipps im Recherchecafé ausprobieren. Aber Achtung! Im Recherchecafé bekommen Sie nur das, was Sie bestellen. Das ist nicht immer das, was Sie auch wünschen und manchmal bekommen Sie vielleicht auch gar nichts.",shortInfo:"Sie können nun diese Tipps im Recherchecafé ausprobieren.",submit:"Bestellen",reset:"Zurücksetzen",next:"Weiter!",correct:"Richtig!",wrong:"Falsch!",retry:"Nochmal!",pleaseOrder:"Bitte markieren Sie alles, was Sie bekommen.",drinks:{cafeAuLait:{title:"Café au Lait",desc:"Kaffee mit Milch in einer Boule, Zucker separat",keywords:"Kaffee, Milch, Schale, Zucker"},"Einspänner":{title:"Einspänner",desc:"Doppelmokka im Glas mit Schlagobershaube und Hohlhippe",keywords:"Glas, Mokka, Schlagsahne, Waffel"},Eiskaffee:{title:"Eiskaffee englisch",desc:"ein Drittel Kaffee, ein Drittel Eis, ein Drittel Obers",keywords:"Eis, Glas, Kaffee, Schlagsahne"},Fiaker:{title:"Fiaker",desc:"Doppelmokka im Henkelglas mit einem Schuss Kirschwasser gespritzt, mit Schlagobershaube und Cocktailkirsche",keywords:"Cocktailkirsche, Glas, Kirschwasser, Mokka, Schlagsahne"},Franziskaner:{title:"Franziskaner",desc:"leichte Melange mit Schlagobers und Schokostreuseln",keywords:"Glas, Kaffee, Milch, Schlagsahne, Schokolade"},"Häferlkaffee":{title:"Häferlkaffee",desc:"Großer Brauner (doppelter Mokka mit Kaffeeobers) im Häferl statt in der großen Schale",keywords:"Becher, Kaffeesahne, Mokka"},"Kännchen":{title:"Kännchen Kaffee",desc:"Kaffee im Kännchen (ca. 2 Tassen), separat Kaffeesahne und Zucker",keywords:"Kaffee, Kaffeesahne, Kaffeekanne, Tasse, Zucker"},Kleiner:{title:"Kleiner Brauner",desc:"einfacher Mokka mit Milch oder Obers in kleiner Schale",keywords:"Kaffeesahne, Mokka, Tasse"},Latte:{title:"Latte Macchiato",desc:"“gefleckte Milch”, aufgeschäumte warme Milch mit Espresso",keywords:"Espresso, Glas, Milch"},Maria:{title:"Maria Theresia",desc:"ein großer Mokka mit einem Schuss Orangenlikör, Schlagobershaube und verziert mit Orangenzesten",keywords:"Apfelsinenschale, Glas, Mokka, Orangenlikör, Schlagsahne"},Melange:{title:"Melange",desc:"halb Kaffee, halb heiße geschäumte Milch, mit Milchschaumhäubchen",keywords:"Glas, Kaffee, Milch"},Milchkaffee:{title:"Milchkaffee",desc:"Kaffee mit Milch(-Schaum)"},"Pharisäer":{title:"Pharisäer",desc:"schwarzer Kaffee mit Rum und einer Haube Schlagsahne überdeckt mit Schokoraspeln auf der Sahne serviert",keywords:"Becher, Kaffee, Rum, Schlagsahne, Schokolade"},"Rüdesheimer":{title:"Rüdesheimer Kaffee",desc:"Kaffee mit Weinbrand flambiert, mit einem Schlag Sahne, Vanillezucker und Schokoladestreusel",keywords:"Glas, Kaffee, Schlagsahne, Schokolade, Vanillezucker, Weinbrand"},"TürkKahvesi":{title:"Türk Kahvesi",desc:"feinst gemahlener Kaffee, mit Zucker im Kupferkännchen aufgekocht",keywords:"Kaffee, Kupferkanne, Tasse, Zucker"},Verkehrter:{title:"Verkehrter",desc:"Kaffee mit 2/3 Milch und 1/3 Kaffee"},"Verlängerter":{title:"Verlängerter",desc:"die Dosierung eines kleinen Schwarzen wird mit der Wassermenge eines großen Schwarzen zubereitet"},Wiener:{title:"Wiener Eiskaffee",desc:"köstliches Vanilleeis, doppelter Mokka, Schlagobershaube, Kaffeebohne und Hohlhippe",keywords:"Glas, Kaffeebohne, Mokka, Schlagsahne, Vanilleeis, Waffel"}}},page:[{headline:"Lernziele",intro:"Dieses Grundlagenmodul wird Sie unterstützen, erfolgreicher nach Literatur für Ihr Studium zu recherchieren.",principles:"Dabei geht es um folgende Prinzipien und Techniken einer Recherche:",content:["formale oder inhaltliche Recherchen","Trunkieren","Verknüpfen","Phrase","Schlagwort","Klassifikation"],rechercheCafeIntro:"Lesen Sie zunächst die Erläuterungen zu jedem Thema. Im Anschluss können Sie die Tipps gleich im Recherchecafé* ausprobieren. Aber Achtung! Im Recherchecafé* bekommen Sie nur das, was Sie bestellen, und das ist nicht immer das, was Sie auch wünschen.",rechercheCafeIdee:"* Das Recherchecafé wurde von der Idee des Boole`schen Restaurants inspiriert, vgl. Donald A. Barclay: Teaching the standard features of electronic databases. In: Teaching electronic information literacy : a how-to-do-it manual / ed. by Donald A. Barclay. New York: Neal-Schuman, 1995. S. 65 sowie Detlev Bieler, Thomas Hapke, Oliver Marahrens, TUB Hamburg-Harburg: DISCUS"},{headline:"Formale, inhaltliche und feldbezogene Suche",formalVsContent:"Zu Beginn Ihrer Recherche sollten Sie sich verdeutlichen, ob Sie formal oder inhaltlich (sachlich, thematisch) suchen:",formalHeader:"Formale Suche",formalExplanation:"Bei einer formalen Suche haben Sie (mehr oder weniger vollständige) Angaben einer Quelle, z.B. aus einer Literaturliste oder durch den Tipp eines Professors. Die genaue Eingabe dieser Angaben führt schnell zu einem Nachweis, ob diese Quelle für Sie verfügbar ist. Die meisten Ressourcen tolerieren allerdings keine Tippfehler.",contentHeader:"Inhaltliche Suche",contentExplanation:"Bei einer inhaltlichen Suche kennen Sie die Quelle nicht genau und wissen nicht, ob Sie die richtigen Suchbegriffe gewählt haben, ob es überhaupt Quellen zu dem gesuchten Thema gibt, und wenn ja, wie viele.",fieldHeader:"Feldbezogene Suche",FieldContent:'Die meisten Ressourcen bieten neben der Freitextsuche in allen Feldern - zumindest in der Option „erweiterte Suche“ - eine feldbezogene Suche an. In der formalen Suche ist die Nutzung des Feldes "Autor" vorteilhaft, wenn der Autorenname auch ein Titelstichwort sein kann. In der inhaltlichen Suche ist die Nutzung der Felder "Schlagwort" und "Klassifikation" vorteilhaft. Dazu mehr in späteren Abschnitten.',nextPage:"Auf der folgenden Seite finden Sie Beispiele für formale Suchen."},{headline:"Beispiele - Formale Suche",intro:'1. In einer Literaturliste finden Sie die Angaben „Nicholas Gregory Mankiw: Grundzüge der Volkswirtschaftslehre. 4. Aufl. Schäffer-Poeschel, 2008“: Im Bibliothekskatalog finden Sie das gewünschte Buch wenn Sie im Feld <span class="fieldName">Alle Wörter</span> jedes beliebige Stichwort aus diesen Angaben eingeben, z.B.',introExamples:["Mankiw, Nicholas Gregory","Volkswirtschaftslehre Nicholas","volkswirtschaftslehre grundzüge"],professorRecommendation:'2. Ihr Professor empfiehlt Ihnen in Fragen des bibliothekarischen Grundwissens (z.B. Was ist ein Stichwort?) im „Hacker“ nachzuschlagen: Wenn Sie nun im Bibliothekskatalog <span class="searchPhrase">Hacker</span> über das Feld <span class="fieldName">Alle Wörter</span> suchen, werden Sie viele Treffer erzielen, die nichts mit der gesuchten Person zu tun haben, sondern mit IT-Spezialisten.',authorHacker:'Wenn Sie hingegen im Feld "Person, Autor" den Suchbegriff "Hacker" eingeben, finden Sie nur Bücher, deren Autor ein Mensch namens Hacker ist. – Übrigens: Die meisten Ressourcen verlangen im Feld Autor die Ansetzung „Nachname, Vorname“, also',authorHackerExamples:["Mankiw, Nicholas","Hacker, Rupert"],or:"oder",outro:"Prüfen Sie in den Hilfetexten der jeweiligen Ressource, wie Namen angesetzt werden."},{headline:"Übung - formale Suche 1",explanation:'Da Sie formale Angaben kennen, machen Sie eine formale Suche und bestellen mit der Eingabe <span class="searchPhrase">pharisäer</span>.',wrong:"Ein bisschen mehr Ernsthaftigkeit, bitte!<br/>Es wird gleich schwieriger.<br/>Genau eine Antwort ist richtig."},{headline:"Übung - formale Suche 2",explanation:'Sie bekommen von einem Kommilitonen mündlich den Hinweis auf eine italienische Kaffespezialität und bestellen mit der Eingabe <span class="searchPhrase">latte macciato</span>.',correct:"Genau! Sie bekommen nichts aus der Liste.<br/>Bei der Suche kommt es darauf an, dass die Wörter korrekt geschrieben sind.",wrong:"Schauen Sie nochmal genau nach. Denken Sie daran, dass es bei der Suche wichtig ist, dass alle Wörter korrekt geschrieben sind. Und denken Sie daran, manchmal ist auch keine der Antworten richtig."},{headline:"Trunkieren",intro:"Das Trunkierungszeichen (auch Wildcard-Operator, Joker oder Platzhalter genannt) ersetzt bei der Suchanfrage",introList:["einen Buchstaben","keinen bis zu einer beliebigen Anzahl von Buchstaben"],or:"oder",asterisk:"In den meisten Ressourcen wird das Sternchen (Asterisk, *) verwendet, in anderen !, ?, $ oder #. Prüfen Sie in jeder Ressource in den Hilfetexten, welches Zeichen für welche Abkürzung verwendet wird.",rightTruncation:"In den meisten Ressourcen ist die Rechts- oder Endtrunkierung möglich, in einigen zusätzlich die Links- oder Anfangstrunkierung.",examples:"Beispiele",exampleSearchQuestionmarkIntro:'Sie geben in eine Ressource <span class="searchPhrase">me?er</span> ein und erhalten Treffer, in denen folgende Worte vorkommen:',exampleSearchQuestionmarkList:["Meier","Meyer","Meter"],andAlso:"aber auch",truncationQuestionmarkSummary:"Im Hilfetext steht: Das Trunkierungszeichen ? ersetzt einen Buchstaben",exampleSearchAsteriskIntro:'Sie geben in einer Ressource <span class="searchPhrase">wirtschaft*</span> ein und erhalten Treffer, in denen z.B. folgende Worte vorkommen, z.B.',exampleSearchAsteriskList:["Wirtschaft","Wirtschafts-","Wirtschaftrecht"],exampleSearchDoubleAsteriskIntro:'Sie geben in einer Ressource <span class="searchPhrase">*wirtschaft*</span> ein und erhalten zusätzlich Treffer, in denen z.B. folgende Worte vorkommen:',exampleSearchDoubleAsteriskList:["Wirtschaft","Betriebswirtschaftslehre","Hauswirtschaftlerin"],truncationAsteriskSummary:"Im Hilfetext steht: Das Trunkierungszeichen * ersetzt keinen bis zu einer beliebigen Anzahl von Buchstaben vor und/oder nach dem von Ihnen eingegebenen Wort.",outro:"Wenn Sie Suchbegriffe trunkieren, erhalten Sie eine größere Treffermenge, als wenn Sie das nicht tun."},{headline:"Übung",explanation:'Sie wünschen Kaffee mit Schlagsahne oder Schlagobers und bestellen mit der Eingabe <span class="searchPhrase">schlag*</span>.<br/>Das * ersetzt eine beliebige Anzahl von Buchstaben am Ende des Suchbegriffs.',wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe <span class="searchPhrase">schlag*</span> 7 Spezialitäten von unserer Karte.'},{headline:"Verknüpfen",intro:"Eine Form der Verknüpfung kennen Sie aus dem Umgang mit Suchmaschinen: Wenn Sie mehrere Suchbegriffe, durch Leerzeichen voneinander getrennt, hintereinander schreiben, erhalten Sie Treffer, in denen alle Suchbegriffe vorkommen, unabhängig von der Reihenfolge und den Zusammenhängen. In manchen Ressourcen werden diese Verknüpfungs-Operatoren durch Zeichen oder Wörter dargestellt, in manchen durch Felder zum Anklicken.",importantOperators:"Nachfolgend finden Sie die wichtigsten Verknüpfungsoperatoren und Beispiele.",andOperators:{headline:"1. Leerzeichen, +, UND, und, AND, and",explanation:"Dieser Verknüpfungsoperator findet alle Treffer, in denen alle verknüpften Suchbegriffe vorkommen.",exampleHeadline:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">mankiw UND volkswirtschaftslehre</span> findet',exampleResult:["Mankiw: Grundzüge der Volkswirtschaftslehre"]},orOperators:{headline:"2. /, ODER, oder, OR, or",explanation:"Dieser Verknüpfungsoperator findet alle Treffer, in denen mindestens ein Suchbegriff vorkommt.",attention:"Achtung!",attentionText:"Anders als im normalen Sprachgebrauch handelt es sich hier nicht um ein exklusives ODER („Christin oder Jakob machen den Abwasch“), sondern um ein inklusives ODER („Christin oder Jakob oder beide …“)!",exampleHeadline:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">mankiw ODER volkswirtschaftslehre</span> findet',exampleResult:["Mankiw: Makroökonomik – mit vielen Fallbeispielen","Ending: Volkswirtschaftslehre – schnell erfasst","Mankiw: Grundzüge der Volkswirtschaftslehre"]},notOperators:{headline:"3. -, NICHT, nicht, NOT, not",explanation:"Dieser Verknüpfungsoperator findet alle Treffer, in denen der markierte Suchbegriff nicht vorkommt.",attention:"Vorsicht!",attentionText:"Sie schließen dabei möglicherweise interessante Treffer aus, weil zufällig der Suchbegriff in ihm vorkommt!",example:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">volkswirtschaftslehre NICHT mankiw</span> findet',exampleResult:["Ending: Volkswirtschaftslehre – schnell erfasst"]},nearOperators:{headline:"4. NEAR, Within, Adj(acent)",explanation:"Dieser Verknüpfungsoperator legt die maximalen Abstände zwischen den Suchbegriffen und eventuell ihre Reihenfolge fest. Siehe Hilfetexte der Ressourcen!",example:"Beispiel",exampleIntro:'Die Eingabe <span class="searchPhrase">gesellschaft w/2 medien</span> (w/2 bedeutet, dass nicht mehr als 2 Worte zwischen den Suchbegriffen liegen) findet:',exampleResult:["Müller: Gesellschaft und Medien","Ziemann: Medien der Gesellschaft – Gesellschaft der Medien","Kamps: Die offene Gesellschaft und ihre Medien"]}},{headline:"Verknüpfen mit unterschiedlichen Operatoren",exampleHeadline:"Beispiele",preCombination:{explanation:"Wollen Sie mehr als zwei Suchbegriffe mit unterschiedlichen Operatoren verknüpfen, so müssen Sie Klammern setzen, um deutlich zu machen, in welcher Reihenfolge die Verknüpfungen abgearbeitet werden sollen.",exampleResult:["(qualitätsmanagement ODER qm) UND sozial*","(qualitätsmanagement ODER qm) UND („soziale arbeit“ ODER sozialarbeit)"],exampleExplanation:"Damit haben Sie die Suche präkombiniert, d.h. Sie haben die Suche vor der Abfrage vollständig formuliert."},postCombination:{explanation:"Eine andere Methode ist die Postkoordination: Dabei führen Sie die Abfragen nacheinander einzeln durch, rufen die Suchgeschichte auf und koordinieren die Ergebnisse im Nachhinein. Manchmal ist es günstiger, die Treffermengen nach und nach einzuschränken.",exampleIntro:"Sie führen nacheinander die Suche nach den folgenden Begriffen durch:",exampleResult:["qualitätsmanagement => Ergebnis 1","qm => Ergebnis 2","„soziale arbeit“ => Ergebnis 3","Sozialarbeit => Ergebnis 4"],exampleExplanation:"Sie rufen die Suchgeschichte auf und koordinieren diese vier Ergebnisse im Nachhinein:",exampleCombinationResult:["Ergebnis 1 ODER Ergebnis 2 => Ergebnis 5","Ergebnis 3 ODER Ergebnis 4 => Ergebnis 6"],exampleFinalCombination:"Nun koordinieren Sie auch noch die Ergebnisse der Suchen 5 und 6:",exampleFinalCombinationResult:["Ergebnis 5 UND Ergebnis 6 = Ergebnis 7"],exampleOutro:"Das Ergebnis der postkoordinierten Suche ist dasselbe wie das Ergebnis der 2. präkombinierten Suche."}},{headline:"Übung - UND",explanation:'Sie wünschen Kaffee mit Sahne und bestellen mit der Eingabe <span class="searchPhrase">kaffee UND sahne</span>.',wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe <span class="searchPhrase">kaffee UND sahne</span> 2 Spezialitäten von unserer Karte.'},{headline:"Übung - ODER",explanation:'Sie wünschen Kaffee mit Schlagsahne oder Schlagobers<br/> und bestellen mit der Eingabe <span class="searchPhrase">schlagsahne ODER schlagobers</span>.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe schlagsahne ODER schlagobers 2 Spezialitäten von unserer Karte."},{headline:"Übung - Präkombination 1",explanation:'Sie wünschen Kaffee oder Mokka mit Sahne oder Obers. Sie formulieren Ihren Wunsch vollständig vor der Bestellung und bestellen mit der Eingabe <span class="searchPhrase">(kaffee ODER mokka) UND (sahne ODER obers)</span>.',wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe "(kaffee ODER mokka) UND (sahne ODER obers)" 4 Spezialitäten von unserer Karte.'},{headline:"Übung - Präkombination 2",explanation:'Sie wünschen Kaffee oder Mokka mit Sahne oder Obers. Sie formulieren Ihren Wunsch vollständig vor der Bestellung und bestellen mit der Eingabe <span class="searchPhrase">(*kaffee* ODER *mokka*) UND (*sahne* ODER *obers*)</span>. Aber Achtung: Bei dieser Bestellung ändert sich das Ergebnis durch die Sternchen in Ihrer Eingabe!',allDone:"Sie wollten Kaffee oder Mokka mit Sahne oder Obers bestellen. Wenn Sie nun die Postkoordination durchführen, erhalten Sie die richtige Bestellung. Es sind die Getränke bestellen, bei denen in beiden Spalten die Häkchen aktiviert sind.",wrong:'Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie mit der Eingabe "(*kaffee* ODER *mokka*) UND (*sahne* ODER *obers*)" 10 Spezialitäten von unserer Karte.'},{headline:"Übung - Postkoordination",intro:"Sie können nun diese Tipps im Recherchecafé ausprobieren. Aber Achtung! Im Recherchecafé bekommen Sie nur das, was Sie bestellen. Das ist nicht immer das, was Sie auch wünschen und manchmal bekommen Sie vielleicht auch gar nichts.",allDone:'Mit dieser nachträglichen Koordination der Suchbegriffe haben Sie dasselbe Ergebnis erzielt wie mit der präkombinierten Suche <span class="searchPhrase">(kaffee ODER mokka)</span> UND <span class="searchPhrase">(sahne ODER obers)</span>.',
explanation:"Sie erinnern sich: Bei der Postkoordination führen Sie die einzelnen Suchen nacheinander aus und schränken die Treffermenge dann nach und nach ein. Sie wünschen Kaffee oder Mokka mit Sahne oder Obers.",tasks:[{task:'Sie bestellen zunächst mit der Eingabe <span class="searchPhrase">kaffee</span>.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die Eingabe von kaffee 9 Spezialitäten von unserer Karte.",correct:"Richtig! Führen Sie nun die nächste Eingabe aus."},{task:'Im nächsten Schritt Ihrer Bestellung markieren Sie nun zusätzlich alles, was Sie mit der Eingabe <span class="searchPhrase">mokka</span> bekommen.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die zusätzliche Eingabe von mokka 4 zusätzliche Spezialitäten von unserer Karte.",correct:"Richtig! Führen Sie nun die nächste Eingabe aus."},{task:'Im nächsten Schritt Ihrer Bestellung markieren Sie nun zusätzlich zur bestehenden Auswahl kaffee ODER mokka, was Sie mit der Eingabe <span class="searchPhrase">sahne</span> bekommen.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die Eingabe von sahne 2 Spezialitäten von unserer Karte.",correct:"Richtig! Führen Sie nun die nächste Eingabe aus."},{task:'Im nächsten Schritt Ihrer Bestellung markieren Sie nun zusätzlich zur bestehenden Auswahl, was Sie mit der Eingabe <span class="searchPhrase">obers</span> bekommen.',wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Insgesamt bekommen Sie in diesem Schritt für die Eingabe von obers 2 Spezialitäten von unserer Karte.",correct:"Richtig! Sie haben nun alle Eingaben einzeln nacheinander ausgeführt. Es ist an der Zeit, diese nun zu koordinieren."}]},{headline:"Phrasenbildung",intro:"Die Phrasensuche kennen Sie aus dem Umgang mit Suchmaschinen: Wenn Sie eine bestimmte Wortfolge in Anführungszeichen setzen, bekommen Sie Treffer, in denen genau diese Wortfolge vorkommt. Wenn Sie die Anführungszeichen weglassen, bekommen Sie hingegen Treffer, in denen die Worte unabhängig von der Reihenfolge vorkommen.",explanation:"Manche Ressourcen erlauben das Setzen eines Trunkierungszeichens (Wildcard-Operator, Joker, Platzhalter, s.o.) innerhalb der Phrasensuche. Es ersetzt dann nicht einen oder mehrere Buchstaben, sondern ein Wort. Es gibt auch gelegentlich Abstandsoperatoren, mit denen Sie den Abstand festlegen können, der maximal zwischen zwei Teilen einer Phrase liegen darf. Bitte lesen Sie die Hilfetexte der jeweiligen Ressource, um diese Suchformulierung zu erfahren.",exampleHeadline:"Beispiele",exampleExplanation:'Mit der Eingabe <span class="searchPhrase">"grundzüge der volkswirtschaftslehre"</span> im Feld <span class="fieldName">alle Wörter</span> erhalten Sie u.a.',exampleResults:["Mankiw: Grundzüge der Volkswirtschaftslehre","Wienert: Grundzüge der Volkswirtschaftslehre","Hermann: Arbeitsbuch Grundzüge der Volkswirtschaftslehre"],examplePlusExplanation:'Mit der Eingabe <span class="searchPhrase">"gesellschaft * medien"</span> im Feld <span class="fieldName">Titel</span> erhalten Sie u.a.:',examplePlusResults:["Müller: Gesellschaft und Medien","Ziemann: Medien der Gesellschaft – Gesellschaft der Medien","Gottwald: Alte Gesellschaft – neue Medien","Langenbucher: Gesellschaft, elektronische Medien und Demokratie","<strong>Aber nicht:</strong> Kamps: Die offene Gesellschaft und ihre Medien, weil * nur ein Wort ersetzt."]},{headline:"Schlagwort",intro:["Manche Ressourcen bieten eine Schlagwortsuche an, auf Englisch werden dafür die Benennungen „Descriptor“, „Subject (Term)“ und gelegentlich „Keyword“ benutzt.","Gemeint ist damit, dass eine Indexiererin oder ein Indexierer den Inhalt eines Dokuments mit Schlagworten beschreibt, die unabhängig von der Terminologie des Dokuments sind. Die Schlagworte werden einer Wortliste mit kontrolliertem Vokabular (einem Thesaurus) entnommen und sind damit standardisiert. So wird in deutschsprachigen Schlagwortsystemen durchweg die Einzahl verwendet, in englischsprachigen überwiegend die Mehrzahl. Homonyme werden durch Zusätze eindeutig gemacht („Krebs <Tier>“, „Krebs <Erkrankung>“) und Synonyme werden vermieden.","Die Suche mit Schlagworten führt zu besseren Ergebnissen, weil nach Inhalten gesucht wird und nicht nach Begriffen, die zufällig auch in dem Dokument vorkommen, aber wenig mit dem Inhalt des Dokuments zu tun haben.","Welches Schlagwort für welchen Zusammenhang benutzt wird, erfahren Sie beispielsweise, indem Sie mit Stichworten Zufallstreffer erzielen und die Schlagworte, die für diese Zufallstreffer vergeben wurden, notieren und mit ihnen eine neue Suche starten."],exampleHeadline:"Beispiel",examples:[{intro:'Mit der Eingabe <span class="searchPhrase">total quality management</span> im Feld <span class="fieldName">Alle Wörter</span> finden Sie u.a.',result:["Saint Clair: Total quality management in information services"],outro:"In den Metadaten dieses Dokuments sehen Sie, dass für diese Quelle  u.a. das Schlagwort “Qualitätsmanagement” vergeben wurde."},{intro:'Mit der Eingabe <span class="searchPhrase">Qualitätsmanagement</span> im Feld <span class="fieldName">Schlagwörter</span> finden Sie auch',result:["Pfaff: ISO 9001:2008 : Basis für praxisgerechte Managementsysteme","Osterhage: Abnahme komplexer Software-Systeme : das Praxishandbuch","Feldmann: Montage in der Leistungselektronik für globale Märkte : Design, Konzepte, Strategien"]}]},{headline:"Übung",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Sie erhalten 4 Spezialitäten von unserer Karte.",explanation:'Sie wünschen Kaffee im Glas und bestellen mit der Eingabe <span class="searchPhrase">Kaffee UND Glas</span> im Feld <span class="fieldName">Schlagworte</span>.'},{headline:"Klassifikation",intro:["Manche Ressourcen bieten die Suchmöglichkeit mit der Hilfe einer Klassifikation oder Systematik (classification, subject). Dafür ordnet eine Indexiererin oder ein Indexierer die Dokumente in Klassen an. Jedes Dokument in einer Klasse hat dabei mindestens ein inhaltliches Merkmal, das es mit allen Dokumenten der Klasse gemeinsam hat und das sich unterscheidet von den Merkmalen der Dokumente der anderen Klassen. Jede Klasse hat eine eigene Benennung, die mit einer Notation verschlüsselt wird.","Sie kennen Systematiken als Stammbaum in der Biologie und als Aufstellungssystematik in der Bibliothek. Wenn Sie ein Buch im Regal gefunden haben, das inhaltlich Ihren Vorstellungen entspricht, dann sehen Sie sich auch die Bücher links und rechts von dem gefundenen an, denn die behandeln wahrscheinlich das gleiche Thema.","In einer Bibliothek steht ein Buch immer nur an einer Stelle, auch wenn es inhaltlich an zwei Stellen stehen könnte. In virtuellen Systematiken kann ein Dokument auch mehreren Klassen zugeordnet werden. Sie suchen mit der Hilfe einer Klassifikation, ähnlich wie mit Schlagworten, nach Inhalten und nicht nach zufälligen Stichworten. Die klassifikatorische Suche wird zumeist als Unterstützung anderer Recherchen eingesetzt, beispielsweise zur Einschränkung einer großen Treffermenge auf einen fachlichen Zusammenhang."],exampleHeadline:"Beispiel",examples:[{intro:['Mit der Eingabe <span class="searchPhrase">Qualitätsmanagement</span> im Feld <span class="fieldName">Alle Wörter</span> finden Sie u.a.'],results:["Qualitätsmanagement DIN EN ISO 9000 ff : Dokumentensammlung – mit der Signatur „Bwl 024 118“"]},{intro:["Die Klasse mit der Notation Bwl 024 wurde Qualitätsmanagement benannt. In den Regalen mit der Bezeichnung Bwl 024 finden Sie also Bücher zum gleichen Thema und zwar nur die, die nicht ausgeliehen sind. Im Katalog können Sie zusätzlich feststellen, welche Bücher zum Thema derzeit ausgeliehen sind.",' Mit der Eingabe <span class="searchPhrase">Bwl 024*</span> (Trunkierung) im Feld <span class="fieldName">Signatur</span> erhalten Sie alle Treffer, die der Klasse Qualitätsmanagement zugeordnet wurden, u.a.'],results:["Suganthi: Total Quality Management","European Foundation for Quality Management: Excellence einführen","Loch: Industrial excellence : management quality in manufacturing"]}]},{headline:"Übung",explanation:" Markieren Sie nun für folgende Spezialität die richtige Klasse:",tasks:[{task:"<b>Türk Kahvesi</b> - <i>feinst gemahlener Kaffee, mit Zucker im Kupferkännchen aufgekocht</i>",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Die Spezialität ist genau einer richtigen Klasse zuzuordnen.",correct:"Richtig! Dann schauen wir mal, ob Sie auch die folgende Spezialität der richtigen Klasse zuordnen können."},{task:"<b>Wiener Eiskaffee</b> - <i>köstliches Vanilleeis, doppelter Mokka, Schlagobershaube, Kaffeebohne und Hohlhippe</i>",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Die Spezialität ist genau einer richtigen Klasse zuzuordnen.",correct:"Richtig! Dann schauen wir mal, ob Sie auch die folgende Spezialität der richtigen Klasse zuordnen können."},{task:"<b>Fiaker</b> - <i>Doppelmokka im Henkelglas mit einem Schuss Kirschwasser gespritzt, mit Schlagobershaube und Cocktailkirsche</i>",wrong:"Das war noch nicht ganz korrekt. Kleiner Tipp: Die Spezialität ist genau einer richtigen Klasse zuzuordnen."}]},{headline:"Danke",relax:"... für das Mitmachen. Hoffentlich war diese Übung nützlich für Sie.",thanks:"Zur Entspannung der Magennerven"},{headline:"Feedback",intro:"Bitte markieren Sie mit einem Mausklick den Punkt, der ihrer Meinung entspricht.",enjoyed:"Ich kann von dem Modul gebrauchen",learned:"Ich habe Neues erfahren",bad:"nichts",good:"sehr viel"},{headline:"Impressum",email:"E-Mail",projectTitle:"Projekt:",authorTitle:"Autor:",designTitle:"Design:",productionTitle:"Produktion:",iconsTitle:"Icons:",iconsContent:'CC 3.0 BY <a href="http://www.flaticon.com/packs/material-design">Material UI by Google</a>',origin:' ursprünglich produziert im Rahmen des Projekts "Competence Cluster Medienkonzeption und netzgestütztes Lehren und Lernen CCM>L", finanziert durch Studiengebühren der Hochschule für Angewandte Wissenschaften Hamburg.',license:{header:"Lizenzen",contentTitle:"Inhalt:",contentContent:'<a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a><br/>',codeTitle:"Code:",codeContent:'<a href="https://opensource.org/licenses/MIT">MIT</a>'}}],feedbackConfirmBox:{yes:"Bestätigen",no:"Nein, doch nicht",thanks:"Vielen Dank!"}}},function(e,n,i){"use strict";var r=i(29),a=i(4),t={confirmBox:i(30)(a)},s=i(25)("./"+$("html").attr("lang")+".js").feedbackConfirmBox;e.exports=function(e){function n(e,n,i){var r=jQuery('<div class="coordinate"/>').css({left:e*d-4,top:n*u-4}).appendTo(o);i&&r.addClass(i)}function i(){o.addClass("active"),o.one("click",function(e){var i=jQuery(this),r=i.offset(),t=r.left,s=r.top,l=e.pageX-t;l=parseInt(l/c*100,10),l=l<0?0:l,l=l>100?100:l;var o=e.pageY-s;o=parseInt(o/h*100,10),o=o<0?0:o,o=o>100?100:o,n(l,o,"my"),a(l,o),i.removeClass("active")})}function a(e,n){var a=o.find(".my"),c=jQuery(t.confirmBox(s));c.find(".yes").on("click",function(){return r.add(e,n),a.removeClass("my"),c.addClass("done"),setTimeout(function(){c.remove()},5e3),!1}),c.find(".no").on("click",function(){return l(),i(),c.remove(),!1}),c.appendTo(a)}function l(){o.find(".my").remove()}var e=jQuery(e),o=e.children(".coordinates"),c=o.width(),h=o.height(),d=c/100,u=h/100;r.get().then(function(e){e.forEach(function(e){n(e.x,e.y)})}),i()}},function(e,n){"use strict";function i(){return i.connection?i.connection:i.connection=DB.connect(t,!0)}function r(e,n){return i().then(function(){var i=new DB.Coordinates;return i.x=e,i.y=n,i.insert()})}function a(){return i().then(function(){return DB.Coordinates.find().descending("createdAt").limit(s).resultList()})}var t="recherchekompetenz",s=250;e.exports={get:a,add:r}},function(e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){return e.template({compiler:[7,">= 4.0.0"],main:function(e,n,r,a,t){var s,l=null!=n?n:{},o=r.helperMissing,c="function",h=e.escapeExpression;return'<div class="confirmFeedback">\n    <div class="during">\n        <a class="yes">'+h((s=null!=(s=r.yes||(null!=n?n.yes:n))?s:o,("undefined"==typeof s?"undefined":i(s))===c?s.call(l,{name:"yes",hash:{},data:t}):s))+'</a>\n        <br/>\n        <a class="no">'+h((s=null!=(s=r.no||(null!=n?n.no:n))?s:o,("undefined"==typeof s?"undefined":i(s))===c?s.call(l,{name:"no",hash:{},data:t}):s))+'</a>\n    </div>\n    <div class="after">\n        '+h((s=null!=(s=r.thanks||(null!=n?n.thanks:n))?s:o,("undefined"==typeof s?"undefined":i(s))===c?s.call(l,{name:"thanks",hash:{},data:t}):s))+"\n    </div>\n</div>"},useData:!0})}},function(e,n){"use strict";function i(){var e=jQuery(this);jQuery('<a href="#"><span>&lt;</span> zurück</a>').appendTo(e).click(r),jQuery('<a href="#">weiter <span>&gt;</span></a>').appendTo(e).click(a)}function r(e){e&&e.preventDefault(),Reveal.navigatePrev()}function a(e){e&&e.preventDefault(),Reveal.navigateNext()}e.exports=function(e){jQuery(e).each(i)}},function(e,n,i){var r=i(33);"string"==typeof r&&(r=[[e.id,r,""]]);i(34)(r,{});r.locals&&(e.exports=r.locals)},function(e,n){},function(e,n,i){function r(e,n){for(var i=0;i<e.length;i++){var r=e[i],a=f[r.id];if(a){a.refs++;for(var t=0;t<a.parts.length;t++)a.parts[t](r.parts[t]);for(;t<r.parts.length;t++)a.parts.push(c(r.parts[t],n))}else{for(var s=[],t=0;t<r.parts.length;t++)s.push(c(r.parts[t],n));f[r.id]={id:r.id,refs:1,parts:s}}}}function a(e){for(var n=[],i={},r=0;r<e.length;r++){var a=e[r],t=a[0],s=a[1],l=a[2],o=a[3],c={css:s,media:l,sourceMap:o};i[t]?i[t].parts.push(c):n.push(i[t]={id:t,parts:[c]})}return n}function t(e,n){var i=p(),r=S[S.length-1];if("top"===e.insertAt)r?r.nextSibling?i.insertBefore(n,r.nextSibling):i.appendChild(n):i.insertBefore(n,i.firstChild),S.push(n);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");i.appendChild(n)}}function s(e){e.parentNode.removeChild(e);var n=S.indexOf(e);n>=0&&S.splice(n,1)}function l(e){var n=document.createElement("style");return n.type="text/css",t(e,n),n}function o(e){var n=document.createElement("link");return n.rel="stylesheet",t(e,n),n}function c(e,n){var i,r,a;if(n.singleton){var t=b++;i=k||(k=l(n)),r=h.bind(null,i,t,!1),a=h.bind(null,i,t,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=o(n),r=u.bind(null,i),a=function(){s(i),i.href&&URL.revokeObjectURL(i.href)}):(i=l(n),r=d.bind(null,i),a=function(){s(i)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else a()}}function h(e,n,i,r){var a=i?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(n,a);else{var t=document.createTextNode(a),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(t,s[n]):e.appendChild(t)}}function d(e,n){var i=n.css,r=n.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}function u(e,n){var i=n.css,r=n.sourceMap;r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),t=e.href;e.href=URL.createObjectURL(a),t&&URL.revokeObjectURL(t)}var f={},m=function(e){var n;return function(){return"undefined"==typeof n&&(n=e.apply(this,arguments)),n}},g=m(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),p=m(function(){return document.head||document.getElementsByTagName("head")[0]}),k=null,b=0,S=[];e.exports=function(e,n){n=n||{},"undefined"==typeof n.singleton&&(n.singleton=g()),"undefined"==typeof n.insertAt&&(n.insertAt="bottom");var i=a(e);return r(i,n),function(e){for(var t=[],s=0;s<i.length;s++){var l=i[s],o=f[l.id];o.refs--,t.push(o)}if(e){var c=a(e);r(c,n)}for(var s=0;s<t.length;s++){var o=t[s];if(0===o.refs){for(var h=0;h<o.parts.length;h++)o.parts[h]();delete f[o.id]}}}};var w=function(){var e=[];return function(n,i){return e[n]=i,e.filter(Boolean).join("\n")}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,